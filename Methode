public static int FindFreePlace(bool[] places, bool isRotary,int neededPlace)
		{
			int klo;
			//Linear
			if (isRotary == false )// für Linear Magazine
			{
				int findplace = 0;
				for (int i = 0; i < places.Length; i++)
				{
					if (places[i] == false)
					{
						findplace += 1;
						if (findplace == neededPlace)
						{
							klo = i - neededPlace + 1;
							return klo;
						}
					}
					else if (findplace != neededPlace && i == places.Length - 1)
					{
						klo = -1;
					  return klo;
					}
					else
					{ findplace = 0; }
				}
			}

			//Rotary
			else if (isRotary == true )// für Rotary Magazine
			{
				int findplace = 0;
				int incounter = 0;
				for (int i = 0; i < places.Length; i++)
				{
					incounter++;
					if (places[i] == false)
					{
						findplace += 1;
						if (findplace == neededPlace)
						{
							klo = i - neededPlace + 1;
							return klo;
						}
						else if (findplace != neededPlace && i == places.Length - 1)
						{
							for (i = 0; i < places.Length; i++)
							{
								if (places[i] == false)
								{
									findplace += 1;
									if (findplace == neededPlace)
									{
										klo = places.Length + i + 1 - neededPlace;
										return klo;
									}
								}
								else
								{
									klo = -1;
									return klo;
								}
							}
							break;
						}
					}
					else if (places[i] == true)
					{ findplace = 0; }
				}
				incounter++;
				if (incounter < places.Length - 1)
				{
					klo = -1;
					return klo;
				}
				//return -1;
			}
			klo = -1;
			return klo;
		}
